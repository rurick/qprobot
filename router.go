package main

import (
	"strings"

	"./ads"
	"./tguser"
	"github.com/tgbotapi"
)

//RouterCalback –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
func RouterCalback(update *tgbotapi.Update, chatID int64, user *tguser.TgUser, bot *tgbotapi.BotAPI) {
	path := strings.Split(user.State, "/")
	if len(path) > 1 {
		switch path[1] {
		case "ads":
			ads.RouterCalback(update, chatID, user, bot)
		}
	}
}

//Router –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
func Router(update *tgbotapi.Update, chatID int64, user *tguser.TgUser, bot *tgbotapi.BotAPI) {
	path := strings.Split(user.State, "/")
	if len(path) == 1 {
		if !actStart(update, chatID, user, bot) {
			pageStart(update, chatID, user, bot)
		}
	}
	if len(path) > 1 {
		switch path[1] {
		case "ads":
			ads.Router(update, chatID, user, bot)
		}
	}

}

/** –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π = append(/** –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π,
–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–Ω–∏—Ü—ã –∫–æ—Ç–æ—Ä—É—é —É–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∞–∏—Ç—å
—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞(–±–æ–ª—å—à–∞—è) –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.*/

//pageStart  –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –∫–æ–º–∞–Ω–¥–µ start
func pageStart(update *tgbotapi.Update, chatID int64, user *tguser.TgUser, bot *tgbotapi.BotAPI) {
	user.Username = update.Message.From.UserName
	user.Name = update.Message.From.FirstName
	user.SetState("root")
	text := "<b>–Ø –ö—É–ü–∏-–†–æ–±–æ—Ç!</b>\n\n" +
		"ü§ñ–Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –í–°–Å —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n" +
		"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –≥–¥–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–º –≤–∏–¥–µüòé!\n\n" +
		"<i>–ï—Å–ª–∏ –¢—ã –≤–¥—Ä—É–≥ –ø–æ—Ç–µ—Ä—è–µ—à—å—Å—è, –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –¢—ã –≤–µ—Ä–Ω—ë—à—Å—è –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</i>\n"

	reply := tgbotapi.NewMessage(chatID, "")
	reply.ParseMode = "HTML"
	reply.ReplyMarkup = keyBoardRoot
	reply.Text = text
	m, _ := bot.Send(reply)
	user.SetLastMsgID(m.MessageID)
}

func actStart(update *tgbotapi.Update, chatID int64, user *tguser.TgUser, bot *tgbotapi.BotAPI) bool {
	// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–±—Ö—ä—è–≤–ª–µ–Ω–∏—è
	if update.Message.Text == ButtonAds {
		user.SetState("root/ads/0")
		ads.PageStart(update, chatID, user, bot, 0)
		return true
	}
	return false
}
